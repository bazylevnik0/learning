extern printf
section .bss               
    string_input resb 1   ;store temp string input

section .data                              
    string_rules db 'Enter five nums(one per string, 0-9):',10 ,0   ;store rules string 
    array_nums db 0, 0, 0, 0, 0                ;store array of nums
    answer dq 0                                ;store answer
    string_answer db 'Answer is:',10,0

section .text
    global main

main:
    call printing_rules    ; printing string_rules
    push rax
    mov r8, 0               ; iterator
    call reading_strings   ; five cycles reading string_input and mov to array_nums
    push rax
    mov r8, 0               ; iterator
    call converting_nums
    push rax
    mov r8, 0               ; iterator
    call calculating_answer
    push rax
    call printing_answer
    push rax
    push rax

    ;exit
    mov rax, 60 ; sys_exit
    mov rdi, 0  ; error_code
    syscall

printing_rules:
    mov rax, 1              ; sys_write
    mov rdi, 1              ; fd stdout
    mov rsi, string_rules
    mov rdx, 38             ; count chars
    syscall
    ret

reading_strings:
    cmp r8, 5                   ; iterator = 5 ?
    je loopquit                ; if iterator = 5 then quit from loop else:
    
    mov rax, 0                  ; sys_read
    mov rdi, 0                  ; fd stdout
    mov rsi, string_input   
    mov rdx, 2                 ; count chars
    syscall

    mov rax, [string_input]
    mov [array_nums + r8], al  ; mov string_input to array_nums
    inc r8                      ; iterator++
    jmp reading_strings

converting_nums:
    cmp r8, 5                   ; iterator = 5 ?
    je loopquit                 ; if iterator = 5 then quit from loop else:
    mov rax, [array_nums + r8]
    sub rax, 48
    mov [array_nums + r8], rax 
    inc r8
    jmp converting_nums

calculating_answer:
    cmp r8, 5                         ; iterator = 5 ?
    je loopquit_calculating_answer    ; if iterator = 5 then quit from loop else:
    mov rax, [answer]
    mov rcx, [array_nums + r8]
    add rax, rcx
    mov [answer], rax 
    inc r8
    jmp calculating_answer

loopquit_calculating_answer:
    mov rdx, 0
    mov rax, [answer]
    mov rcx, 5
    div rcx
    mov [answer], rax 

    ;mov rax, [answer]
    ;cvtsi2sd xmm0, rax
    ;mov rcx, 5
    ;cvtsi2sd xmm1, rcx
    ;divsd xmm0, xmm1
    ;movsd [answer], xmm0
    ret

printing_answer:
    mov rax, [answer]
    add rax, 48
    mov [answer], rax

    mov rax, 1  ; sys_write
    mov rdi, 1  ; fd stdout
    mov rsi, string_answer
    mov rdx, 12 ; count chars
    syscall
    mov rax, 1  ; sys_write
    mov rdi, 1  ; fd stdout
    mov rsi, answer
    mov rdx, 1 ; count chars
    syscall

    ;mov rdi,string_answer ; first argument: format string
    ;movq xmm0,[answer]    ; second argument: float number
    ;mov al,1              ; one float argument
    ;call printf
    ret

loopquit:
    ret 